// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Fermekoo/orderin-api/db/models"

	uuid "github.com/google/uuid"
)

// CartRepo is an autogenerated mock type for the CartRepo type
type CartRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, cart
func (_m *CartRepo) Add(ctx context.Context, cart *models.Cart) error {
	ret := _m.Called(ctx, cart)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Cart) error); ok {
		r0 = rf(ctx, cart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, userId, cartId
func (_m *CartRepo) Delete(ctx context.Context, userId uuid.UUID, cartId uuid.UUID) error {
	ret := _m.Called(ctx, userId, cartId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, userId, cartId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByProductId provides a mock function with given fields: ctx, userId, productId
func (_m *CartRepo) FindByProductId(ctx context.Context, userId uuid.UUID, productId uuid.UUID) (models.Cart, error) {
	ret := _m.Called(ctx, userId, productId)

	if len(ret) == 0 {
		panic("no return value specified for FindByProductId")
	}

	var r0 models.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (models.Cart, error)); ok {
		return rf(ctx, userId, productId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) models.Cart); ok {
		r0 = rf(ctx, userId, productId)
	} else {
		r0 = ret.Get(0).(models.Cart)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, userId, productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, userId
func (_m *CartRepo) GetAll(ctx context.Context, userId uuid.UUID) ([]models.Cart, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.Cart, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Cart); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSelectedItems provides a mock function with given fields: ctx, userId, selectedIds
func (_m *CartRepo) GetSelectedItems(ctx context.Context, userId uuid.UUID, selectedIds []uuid.UUID) ([]models.Cart, error) {
	ret := _m.Called(ctx, userId, selectedIds)

	if len(ret) == 0 {
		panic("no return value specified for GetSelectedItems")
	}

	var r0 []models.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uuid.UUID) ([]models.Cart, error)); ok {
		return rf(ctx, userId, selectedIds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uuid.UUID) []models.Cart); ok {
		r0 = rf(ctx, userId, selectedIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, []uuid.UUID) error); ok {
		r1 = rf(ctx, userId, selectedIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQty provides a mock function with given fields: ctx, userId, cartId, act
func (_m *CartRepo) UpdateQty(ctx context.Context, userId uuid.UUID, cartId uuid.UUID, act string) error {
	ret := _m.Called(ctx, userId, cartId, act)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQty")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string) error); ok {
		r0 = rf(ctx, userId, cartId, act)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCartRepo creates a new instance of CartRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCartRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *CartRepo {
	mock := &CartRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
