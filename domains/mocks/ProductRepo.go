// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Fermekoo/orderin-api/db/models"

	uuid "github.com/google/uuid"
)

// ProductRepo is an autogenerated mock type for the ProductRepo type
type ProductRepo struct {
	mock.Mock
}

// FindById provides a mock function with given fields: ctx, productId
func (_m *ProductRepo) FindById(ctx context.Context, productId uuid.UUID) (models.Product, error) {
	ret := _m.Called(ctx, productId)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (models.Product, error)); ok {
		return rf(ctx, productId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.Product); ok {
		r0 = rf(ctx, productId)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *ProductRepo) GetAll(ctx context.Context) ([]models.Product, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Product, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByCategoryId provides a mock function with given fields: ctx, categoryId
func (_m *ProductRepo) GetProductByCategoryId(ctx context.Context, categoryId uuid.UUID) ([]models.Product, error) {
	ret := _m.Called(ctx, categoryId)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByCategoryId")
	}

	var r0 []models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.Product, error)); ok {
		return rf(ctx, categoryId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Product); ok {
		r0 = rf(ctx, categoryId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, categoryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductRepo creates a new instance of ProductRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepo {
	mock := &ProductRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
